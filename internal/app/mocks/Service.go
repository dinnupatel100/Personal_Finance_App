// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/personal-finance-app/domain"
	app "github.com/personal-finance-app/internal/app"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddBudget provides a mock function with given fields: _a0
func (_m *Service) AddBudget(_a0 app.Budget) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.Budget) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCategory provides a mock function with given fields: _a0
func (_m *Service) AddCategory(_a0 app.Category) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.Category) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTransaction provides a mock function with given fields: _a0
func (_m *Service) AddTransaction(_a0 app.Transaction) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBudget provides a mock function with given fields: _a0
func (_m *Service) DeleteBudget(_a0 app.Budget) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.Budget) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransaction provides a mock function with given fields: _a0
func (_m *Service) DeleteTransaction(_a0 app.Transaction) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBudgets provides a mock function with given fields:
func (_m *Service) GetAllBudgets() ([]domain.Budget, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBudgets")
	}

	var r0 []domain.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Budget, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Budget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTransactions provides a mock function with given fields:
func (_m *Service) GetAllTransactions() ([]domain.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudgetById provides a mock function with given fields: _a0
func (_m *Service) GetBudgetById(_a0 int64) (*domain.Budget, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetById")
	}

	var r0 *domain.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Budget, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Budget); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudgetData provides a mock function with given fields:
func (_m *Service) GetBudgetData() (map[string]int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetData")
	}

	var r0 map[string]int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByCategory provides a mock function with given fields: _a0
func (_m *Service) GetTransactionByCategory(_a0 string) ([]domain.Transaction, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByCategory")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Transaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionById provides a mock function with given fields: id
func (_m *Service) GetTransactionById(id int64) (*domain.Transaction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionById")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Transaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionData provides a mock function with given fields:
func (_m *Service) GetTransactionData() (map[string]int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionData")
	}

	var r0 map[string]int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0
func (_m *Service) Login(_a0 app.Login) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.Login) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: _a0
func (_m *Service) Search(_a0 string) ([]domain.Transaction, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Transaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: _a0
func (_m *Service) Signup(_a0 app.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBudget provides a mock function with given fields: _a0
func (_m *Service) UpdateBudget(_a0 app.Budget) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.Budget) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: _a0
func (_m *Service) UpdateTransaction(_a0 app.Transaction) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(app.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
